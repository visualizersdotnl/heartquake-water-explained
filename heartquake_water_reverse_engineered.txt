
Rev. engineered guide to Heartquake/Iguana's water effect.
Written in may 2016 for retro platform coders so inclined to recreate this fun effect.

By Superplek/Bypass, or as Baudsurfer put it, the coolest guy on the planet.
Comments, bashing, pointing out typos or rubbing my nose in blatant mistakes: ndewit@gmail.com!

** Introduction **

Youtube: https://youtu.be/be58zEABBSo?t=330
Original source code by Iguana: https://www.hornet.org/code/demosrc/demos/hq_water.zip

Disclaimer: this is a mixture of plain text, pseudo code and an awkward blend between Pascal and x86 assembler (16-bit). It's important to know this effect was originally written for the PC 386 platform, and also, this guide was written during a drinking session.

First of all: 2 water buffers are to be used. In Heartquake they are 16-bit signed buffers, 160x85 (half the screen width and a little less than half
it's vertical resolution). Obviously this cuts into the effect's resolution, but the 16-bit precision givves a pretty decent range for arithmetic that in turn makes the effect look a lot better. So, fine tradeoff. Plus this was a 16-bit MS-DOS production, so that's the native register size to boot.

Now, for each frame:

** STEP 1: integration **

An integration step is done first, or rather, approximated. This animates the water. It's not unlike your average cheap old school blur, just a tad more intricate. So as described above, we have 2 buffers: A and B. Theoretically 3 are neeeded, but just two will do (it'll become clear later on).

The integration loop looks as follows:

We're going to integrate both buffers and store the result in buffer B (which is the one we will use later on, this frame, to render).

For both buffers we skip the first and last line as to cheaply omit conditional checks or even just a pro- and epilogue loop to handle it, so we don't read nor write out of bounds. Ugly, but this is how the original does it, and so long as you don't render any waves towards the edges you're in the clear.

Now for each pixel, take the 4 neighbouring ones from buffer A, add them up, and divide the result by 2 (using arithmetic shift right by 1). Then, take the current pixel from buffer B (which is the one we rendered last frame and thus holds the previous frame's water state) and subtract it from the result of the addition we just did based on buffer A. Now for dampening, make a copy of the value we have calculated, divide it by 16 (arithmetically shift it by 4), subtract it from what we had. Write this to the current position in buffer B and we're done. Dividing by 16 is what Heartquake usually does, though depending on the type of shape they were rendering made it a variable.

I cite:

	; Dampening is simulated by subtracting 1/2^n of result.
	; n=4 gives best-looking result
	; n<4 (eg 2 or 3) thicker consistency, waves die out immediately
	; n>4 (eg 8 or 12) more fluid, waves die out slowly

Seems pretty self-explanatory.

Now it's time to switch buffers A and B (using whatever method's most optimal for you).

** STEP 2: animation **

This is the simple and fun part. We'll be writing to the buffer used to store the result of the previous step.

Basically anything goes, but keep in mind to stay away from the upper and lower edge unless you've chosen to handle that correctly. Since Heartquake uses signed values (and so should you, or approximate it using a bias if your platform is limited) it's purely a matter of adding and subtracting. This can be an animated sine wave, a text plotter, be creative (or just download HQ_WATER.ZIP, it's in the Hornet archives and most of this code is in the Pascal module). Subtracting looks cool. Make sure to use sensible values.

If you look at the part closely you will see that the text has some kind of perspective to the naked eye, but in reality it's nothing more than a smart color palette and pre-rendered cursive bitmaps.

A few hints taken from Heartquake:

- They usually write blocks of 2 by 2 pixels or larger for animations or drops.
- They convert their static text bitmaps to 1-bit to conserve space (see 'BitLift' in ASMFX.ASM); there's also an 'IntLift' but I haven't seen it used but it's rather self-explanatory.
- Text is "lifted" quite high, uniformly. In WATER.PAS you can see that depending on the text it's somewhere between 96 and 256 units in the 16-bit range.

An important detail, and I'll get back to this later in the next step, is the amount that defines a single discrete (visible) height step. In Heartquake it's 8. The ratio between this value and your range will more or less define the smoothness of the effect.

I highly recommend having a peek at that part of the original source.

** STEP 3: rendering (projection) **

This part is either nifty, cheap, or both depending on how you look at it. The sky is purple, the water is predominantly orange (with a blend towards the sky color at the upper end). This was easy since PC MCGA has a resolution of 320x200 with a 256 color palette, so using the amount of lines covered by the water effect left plenty room in the palette for not just a sky, but also another font writer above it. Pause the demo, of course during this effect, at a calm point and look to the left or right line on the screen border to see exactly what I mean. 

In essence this is a voxel method but there is no real-time perspective at play whatsoever.

First let me introduce another 16-bit signed array (320 pixels wide, ergo your screen or effect resolution) called 'TOPS'. Before the effect starts, Heartquake fills this array with values. Let me cite the Pascal function used to do so:

	procedure InitTable;
	var i : integer;
	begin
	  FillChar( U^, sizeof(TU), 0 );
	  for i := 0 to NX-1 do TOPS[i] := 199*320+2*i;
	end;

Now what this does is simply erasing the water buffers (0, which means flat) and filling the TOPS array with a value that basically means: the bottom most pixel for each column on screen (the multiply by 2 is there because they're working with 16-bit integers).

Now then, on to the (simple) projection routine. It's a little bit of a hack that works specifically in their case, so I'll try to refrain from into context-specific details.

As I mentioned before, the discrete heigth step granularity is 8, here's proof:

	sub bx,8              ; each row is 8 (=1 pixel) higher
	mov ax, [si]          ; then the last.

I'm sure he meant to type 'than' but hey, Spaniards in the early 90s.

We're going to render columns, starting at the bottom of each vertical line. I'll use a little indentation here to prevent it becoming just as fuzzy as the assembler routine itself.

So, for each value (horizontally, or X) in the water buffer, we'll be:

	Initializing a 16-bit signed value (let's from now on assume they all are, shall we?) to 7: LAST_HEIGHT.
	Initializing a value that holds the color (or palette index) that corresponds to the lowest pixel of each column (200 in this case): CUR_COLOR.
	And, as I already mentioned, we start at the bottom of this column: CUR_POS.

	Then, for each value vertically (Y) in the water buffer:

		We subtract 8 from LAST_HEIGHT, which in the first iteration always means it'll end up at -1.
		We'll read from the water buffer (current position): WATER_HEIGHT.
		We subtract LAST_HEIGHT from WATER_HEIGHT, and then do a signed check if it's not greater (store result as HEIGHT_DIFF).

		IMPORTANT: starting at 7 and subtracting 8 means we're comparing a possible 0 (flat) to -1 and subsequently recognize
		that we in fact *do* have to plot a pixel as to correctly render flat parts.

		Not greater? Then skip ahead to @NOT_GREATER, otherwise:

			They OR the HEIGHT_DIFF with 7, which is a nice 3 bits, which means we'll end up with a multiple of 8 plus 7.
			This is consistent with the trick I described just above; if it's greater we're upping the stakes by 1 pixel and
			this accomplishes exactly that.

			Let me quote something that cleared it up for me, in the same spot in the code:

				dec dx
				sar dx,3
				/.../
				dec dx
				jge @2 (dx+1 times)

			Now, let us render pixels, so another loop:

				Render 2 pixels (remember, Heartquake used half precision horizontally) in CUR_COLOR.
				
				Move your destination (screen pointer) up 1 pixel: subtract screen width from CUR_POS.
				In Heartquake's case that's simply subtracting 320 bytes.

				Subtract 8 from HEIGHT_DIFF, and keep looping as long as it's (signed compare!) above zero.

			@NOT_GREATER: (this is where we would've arrived earlier if the first compare yields NEGATORY..)

			Move the pointer in the water buffer up one row (I'll reveal an implementation detail that's kind of nifty later on).
			Tone down CUR_COLOR a single notch (so just 1 tint darker, here's another place to get creative).

		Finish the vertical loop (Y).

	Now, we're back to the TOPS thing. Let me show some code first:

	    pop bx
	    mov ax, [fs:bx]         ; get last top of column address
	    mov [fs:bx], di         ; ...and save current one for next time
	    add bx,2                ; (update ptr for next col)

    What happens here is that on our current X position (top level iteration) in this array we store
    the current position or height if you will, for *this* column (so don't forget to increase your pointer accordingly): CUR_POS. But before we do so, we load the previous one, let's call it PREV_POS.

    Now what follows I realize, like many of this is an optimization so as to not redraw the entire screen
    every frame, but this is what they did (I'm going to use a label again):

    @BG_FILL:

    	Compare CUR_POS with PREV_POS (signed, in HQ), and if it's lower (PREV_POS above or equal to CUR_POS),
    	write the according background pixel(s) (in this case of course also per 2) from any source you'd like to CUR_POS, lowering CUR_POS so long as the condition remains true.

    	Though this is a detail really and I'd suggest when first implementing this, just keep that stuff black or whatever.

    Now, set your screen pointer (CUR_POS) to the bottom of the next column.
    Likewise, update your water buffer pointer to the next drop.

Now finish up the top level (X) loop, and presto, you're done.

** FINAL WORDS **

Now I'm pretty sure I made an oversight or two, a typo or three; I'm tired, as simple as this effect appears it has a few nifty things going for it that make it work the way it did and I think it's very suitable for old school platforms just as it was more than 20 years ago.

Now finally another detail I omitted is that in the PC 16-bit implementation they flipped the X and Y axis of the water buffers. Why? It was bad enough already to non-sequentially write to VRAM (or even a virtual screen), but this way they could at least sequentially run through the water buffer, saving cycles due to potential memory access penalties.

That's it.

** ORIGINAL CODE FOR THE RENDER/PROJECT FUNCTION **

I fully realize my explanation is a bit dense and I'm not a guy who writes a lot of stuff other than trash talk, so just for completeness sake (though the link to the entire source is on top of the article), here's the exact code.

Keep in mind, this is 16-bit x86 assembler!


		PROC DrawSurf NEAR
	P386
	        push bp

	        mov si, [word ptr U]
	        test [CT], 1
	        jz @@0
	        add si, NX*NY*2
	      @@0:                        ; ds:si -> U[CT]

	        mov ax, 0a000h
	        mov es, ax
	        mov di, 199*320           ; es:di -> Screen[199,0]

	        mov bx, offset TOPS
	        mov cx, NX

	        push gs fs ds
	        mov ax, ds
	        mov fs, ax
	        mov ax, [word ptr B+2]
	        mov gs, ax
	        mov ax, [word ptr U+2]
	        mov ds, ax

	        @@forX:
	          push cx
	          push di
	          push bx

	          mov bx,7                ; highest so far
	          mov bp, 200*(101h)
	          mov cx, NY
	          @@forY:
	            sub bx,8              ; each row is 8 (=1 pixel) higher
	            mov ax, [si]          ; then the last.
	            mov dx, ax
	            sub dx, bx
	            jng @@1               ; not above current highest
	             or ax, 0007          ; round to 7 + a multiple of 8
	             mov bx, ax
	                          ; dec dx/sar dx,3/.../dec dx/jge @2 (dx+1 times)
	             @@2:
	              mov [es:di],bp
	              sub di,320          ; point to next row, same column
	              sub dx,8
	              jg @@2      ; (you wouldn't believe how much
	                          ;  slower LOOP is on a 486!)
	           @@1:
	            add si,2              ; point to next column, U[CT,X,Y+1]
	            sub bp, 0101h         ; dim color one notch
	          dec cx
	          jnz @@forY      ; LOOPs suck!

	          pop bx
	          mov ax, [fs:bx]         ; get last top of column address
	          mov [fs:bx], di         ; ...and save current one for next time
	          add bx,2                ; (update ptr for next col)

	          @@3:
	          cmp ax, di
	          jae @@4
	            mov bp, [gs:di]
	            mov [es:di],bp        ; if this column is lower than the
	            sub di, 320           ; last one, clear extra rows w/ background
	            jmp @@3
	          @@4:

	          pop di                  ; fetch addr of row 199
	          add di,2                ; skip to next column
	          pop cx                  ; fetch counter
	          dec cx
	          jnz @@forX      ; did I mention...?  ;-)

	          pop ds fs gs
	          pop bp
	P286
	       ret
	       ENDP
